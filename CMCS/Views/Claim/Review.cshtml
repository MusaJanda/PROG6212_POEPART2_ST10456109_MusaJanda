@model CMCS.Models.Claim

@{
    ViewData["Title"] = "Review Claim";
    var isProgrammeCoordinator = User.IsInRole("ProgrammeCoordinator");
    var isAcademicManager = User.IsInRole("AcademicManager");
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h2 class="mb-0"><i class="bi bi-clipboard-check"></i> Review Claim</h2>
            <span class="badge bg-light text-dark fs-6">ID: @Model.ClaimId</span>
        </div>
        <div class="card-body">
            <!-- Claim Details -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <h5><i class="bi bi-person"></i> Lecturer Information</h5>
                    <hr>
                    <dl class="row">
                        <dt class="col-sm-4">Name:</dt>
                        <dd class="col-sm-8">@Model.Lecturer?.FirstName @Model.Lecturer?.LastName</dd>

                        <dt class="col-sm-4">Email:</dt>
                        <dd class="col-sm-8">@Model.Lecturer?.Email</dd>

                        <dt class="col-sm-4">Department:</dt>
                        <dd class="col-sm-8">@Model.Lecturer?.Department</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <h5><i class="bi bi-receipt"></i> Claim Summary</h5>
                    <hr>
                    <dl class="row">
                        <dt class="col-sm-4">Claim Date:</dt>
                        <dd class="col-sm-8">@Model.ClaimDate.ToString("dd MMM yyyy")</dd>

                        <dt class="col-sm-4">Hours Worked:</dt>
                        <dd class="col-sm-8">@Model.HoursWorked</dd>

                        <dt class="col-sm-4">Hourly Rate:</dt>
                        <dd class="col-sm-8">R @Model.HourlyRate.ToString("F2")</dd>

                        <dt class="col-sm-4">Total Amount:</dt>
                        <dd class="col-sm-8"><strong>R @((Model.HoursWorked * Model.HourlyRate).ToString("F2"))</strong></dd>
                    </dl>
                </div>
            </div>

            <!-- Description -->
            <div class="row mb-4">
                <div class="col-12">
                    <h5><i class="bi bi-card-text"></i> Work Description</h5>
                    <hr>
                    <div class="border rounded p-3 bg-light">
                        @Model.Description
                    </div>
                </div>
            </div>

            <!-- Documents -->
            @if (Model.Documents != null && Model.Documents.Any())
            {
                <div class="row mb-4">
                    <div class="col-12">
                        <h5><i class="bi bi-paperclip"></i> Supporting Documents</h5>
                        <hr>
                        <div class="list-group">
                            @foreach (var doc in Model.Documents)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <i class="bi bi-file-earmark"></i>
                                        @doc.FileName
                                        <small class="text-muted ms-2">(@doc.FileSize bytes)</small>
                                    </div>
                                    <a href="@Url.Action("Download", "Claim", new { id = doc.DocumentId })"
                                       class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-download"></i> Download
                                    </a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }

            <!-- Approval Forms -->
            <div class="row">
                <div class="col-12">
                    <h5><i class="bi bi-check-circle"></i> Take Action</h5>
                    <hr>

                    @if (isProgrammeCoordinator)
                    {
                        <form asp-action="ApproveByCoordinator" method="post" class="needs-validation" novalidate>
                            <input type="hidden" name="id" value="@Model.ClaimId" />

                            <div class="form-group mb-3">
                                <label for="coordinatorNotes" class="form-label fw-bold">Notes (optional):</label>
                                <textarea name="coordinatorNotes" class="form-control" rows="3"
                                      placeholder="Add any notes or comments about this claim..."></textarea>
                            </div>

                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button type="submit" name="isApproved" value="false" class="btn btn-danger me-md-2">
                                    <i class="bi bi-x-circle"></i> Reject Claim
                                </button>
                                <button type="submit" name="isApproved" value="true" class="btn btn-success">
                                    <i class="bi bi-check-circle"></i> Approve Claim
                                </button>
                            </div>
                        </form>
                    }

                    @if (isAcademicManager)
                    {
                        <!-- APPROVE/REJECT FORM -->
                        <form asp-action="ApproveByManager" method="post" id="managerForm" class="needs-validation" novalidate>
                            <input type="hidden" name="id" value="@Model.ClaimId" />
                            <input type="hidden" name="returnToCoordinator" id="returnToCoordinator" value="false" />

                            <div class="form-group mb-3">
                                <label for="managerNotes" class="form-label fw-bold">Notes:</label>
                                <textarea name="managerNotes" class="form-control" rows="3"
                                      placeholder="Add any notes, feedback, or reasons for your decision..."></textarea>
                                <small class="form-text text-muted">Notes are required for rejection or return to coordinator.</small>
                            </div>

                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <!-- Final Reject Button -->
                                <button type="button" class="btn btn-danger me-md-2" id="finalRejectBtn">
                                    <i class="bi bi-x-circle"></i> Final Rejection
                                </button>

                                <!-- Return to Coordinator Button -->
                                <button type="button" class="btn btn-warning me-md-2" id="returnToCoordinatorBtn">
                                    <i class="bi bi-arrow-left-circle"></i> Return to Coordinator
                                </button>

                                <!-- Approve Button -->
                                <button type="button" class="btn btn-success" id="approveBtn">
                                    <i class="bi bi-stamp"></i> Final Approval
                                </button>
                            </div>
                        </form>

                        <script>
                            document.addEventListener('DOMContentLoaded', function() {
                                const form = document.getElementById('managerForm');
                                const notesField = document.querySelector('textarea[name="managerNotes"]');
                                const returnToCoordinatorField = document.getElementById('returnToCoordinator');

                                // Final Rejection
                                document.getElementById('finalRejectBtn').addEventListener('click', function() {
                                    if (!validateNotes('reject')) return;

                                    returnToCoordinatorField.value = 'false';
                                    // Create hidden field for isApproved = false
                                    createHiddenField('isApproved', 'false');
                                    form.submit();
                                });

                                // Return to Coordinator
                                document.getElementById('returnToCoordinatorBtn').addEventListener('click', function() {
                                    if (!validateNotes('return')) return;

                                    if (confirm('Return this claim to the coordinator for revision?')) {
                                        returnToCoordinatorField.value = 'true';
                                        // Create hidden field for isApproved = false
                                        createHiddenField('isApproved', 'false');
                                        form.submit();
                                    }
                                });

                                // Final Approval
                                document.getElementById('approveBtn').addEventListener('click', function() {
                                    if (!validateNotes('approve')) return;

                                    returnToCoordinatorField.value = 'false';
                                    // Create hidden field for isApproved = true
                                    createHiddenField('isApproved', 'true');
                                    form.submit();
                                });

                                function validateNotes(action) {
                                    const notes = notesField.value.trim();
                                    if (!notes) {
                                        const message = action === 'approve'
                                            ? 'Please provide notes for approval.'
                                            : `Please provide notes explaining the reason for ${action}.`;
                                        alert(message);
                                        notesField.focus();
                                        return false;
                                    }

                                    if (action === 'reject') {
                                        return confirm('Are you sure you want to permanently reject this claim? This action cannot be undone.');
                                    }

                                    return true;
                                }

                                function createHiddenField(name, value) {
                                    // Remove existing hidden field if it exists
                                    const existingField = document.querySelector(`input[name="${name}"]`);
                                    if (existingField) {
                                        existingField.remove();
                                    }

                                    // Create new hidden field
                                    const hiddenField = document.createElement('input');
                                    hiddenField.type = 'hidden';
                                    hiddenField.name = name;
                                    hiddenField.value = value;
                                    form.appendChild(hiddenField);
                                }
                            });
                        </script>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="mt-3">
        <a asp-action="Index" asp-controller="Dashboard" class="btn btn-secondary">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </a>
    </div>
</div>